
import unittest
from enum import Enum
from py_usart import (
        usart_puts, usart_gets, isr_USART_UDRE_vect, isr_USART_RX_vect,
        buffer_debug
)

BUF_SZ = 64
DEBUG = 1

class Buf(Enum):
    RX = 0
    TX = 1


class TestUsart(unittest.TestCase):

    def test_usart_puts(self):
        for i in xrange(8):
            data = "put string %d" % i

            ## send data
            usart_puts(data)

            ## check data in ring buffer
            buf = buffer_debug(Buf.TX.value, DEBUG)
            head, tail = buf['head'], buf['tail']
            self.assertEqual((head - tail) % BUF_SZ, len(data))

            ## read data from buffer
            result = isr_USART_UDRE_vect()
            self.assertEqual(result[:len(data)], data)

            ## check data in ring buffer
            buf = buffer_debug(Buf.TX.value, DEBUG)
            head, tail = buf['head'], buf['tail']
            self.assertEqual(head, tail)

    def test_usart_gets(self):
        for i in xrange(8):
            data = "get string %d" % i

            ## send data
            isr_USART_RX_vect(data)

            ## check data in ring buffer
            buf = buffer_debug(Buf.RX.value, DEBUG)
            head, tail = buf['head'], buf['tail']
            self.assertEqual((head - tail) % BUF_SZ, len(data))

            ## read data from buffer
            result = usart_gets()
            self.assertEqual(result[:len(data)], data)

            ## check data in ring buffer
            buf = buffer_debug(Buf.RX.value, DEBUG)
            head, tail = buf['head'], buf['tail']
            self.assertEqual(head, tail)


if __name__ == "__main__":
    unittest.main()

